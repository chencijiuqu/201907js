// == 和 === 的区别
// = ：赋值 把右边的值赋给左边
// == : 相对比较 （返回一个布尔值）
// ===：绝对比较
// ====(及以上)：报错

/**相对比较(数据类型之间比较的规律)：如果数据类型左右两边不同，那么会进行默认的转换，再进行比较
 * 数字 == 字符串：先把字符串转成 number ，然后在和 number 进行比较。
 * 数字 == 布尔值：先把布尔值转成数字（true -> 1 , flase -> 0），然后再进行比较。
 * 数字 == 对象： 对象先调用 toString 转成字符串，再转成数字。然后跟数字进行比较。(数字跟所有对象转换都是false)
 * 数字 == 数组：先把数组转成字符串，然后再转成数字。然后再跟数字进行比较比较。
 * 数字 == null：（数字跟null转换是false）
 * 数字 == undefined：也是false（undefined是未定义）
 * null == undefined：true (null和undefined除了它们，任何类型都不相等)
 * NaN == Nan：false
 * 对象 == 对象：比较的是堆内存空间地址。（在JS中，只要遇到 {} ，会马上开辟一个新空间地址）
 * 对象 == 字符串：先把对象转成字符串，然后再和字符串进行比较。（字符串和对象比较是false，但是 {} == "[object Object]" 除外）
 * 对象 == 布尔值：先把对象转成字符串，然后再转成数字。然后布尔值直接转成数字。所以对象和布尔值永远不可能相等
 * 
 * 
 */
console.log(({}.toString())); // "[object Object]" (所有对象都是)
console.log(0 == null); // 空对象指针，null是空间类型的，不调用 Number方法。
// 0 是数字类型 ，但是 null 是一个空间地址 所有类型都不相等
console.log(0 == undefined); // false
[] == []; // false
[] == false; // true

// 绝对比较：必须保证一摸一样的才返回 true（值要一样，类型也要一样）

var obj = {
    a: null,
    b: undefined
}
