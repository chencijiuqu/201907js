// 后端给前端的数据：一般数组和对象

// native code 内置代码的意思

// 所有的方法都是函数

// 数组方法 20 个

/**
 * 1. 数组方法的作用
 * 2. 参数
 * 3. 方法的返回值
 * 4. 原有的数组是否发生变化
 * */ 
var ary = [1,3,5,7,9,2,4,6,8,0];
console.log(ary.pop());
/**1. pop() 是个函数
 * 语法：ary.pop()
 * 1. 删除数组的最后一项
 * 2. 无参数
 * 3. 被删除的那一项
 * 4. 发生变化
 */
var ary1 = [1,3,5,7,9,2,4,6,8,0];
ary1.pop();

/**2. push()
 * 语法：ary.push(100,{})
 * 1. 向数组末端增加一项或多项
 * 2. 要增加的数组项(一项或多项)
 * 3. 返回新数组的长度(length)
 * 4. 改变
 */
var ary2 = [1,3,5,7,9,2,4,6,8,0];
ary2.push(2);
ary2.push(4,6)

/**3. shift
 * 语法：ary.shift()
 * 1. 向数组开头删除一项
 * 2. 无参数
 * 3. 返回被删除的那一项
 * 4. 改变
 */
var ary3 = [1,3,5,7,9,2,4,6,8,0];
ary3.shift();

/**4. unshift
 * 语法：ary.unshift({},function () {})
 * 1. 向数组开头增加一项或多项
 * 2. 要增加的数组项(一项或多项)
 * 3. 返回新数组的长度(length)
 * 4. 改变
 */
var ary4 = [1,3,5,7,9,2,4,6,8,0];
ary4.unshift(0);
ary4.unshift([2,4,6,8,20],{name:"张三"})

/**5. slice
 * 语法：ary.slice(m,n)：从 m 开始截取到 n ，但是不包含 n
 * 语法：ary.slice(m); 从索引 m 开始 复制到最后一项
 * 语法：ary.slice(): 复制这个数组
 * 语法：ary.slice(1,-1) - > (1,ary.length - 1); 在里面包含负数，就会用该length 负数 ？？如果负数大于length呢
 * 语法：ary.slice(m,n); 如果 m 比 n 大，返回值就是空数组
 * 语法：ary.slice(m,n,x)
 * 1. 截取(复制)
 * 2. 开始索引，和结尾索引(不包含该索引)
 * 3. 返回截取到的新数组
 * 4. 不改变
 */


/**6. splice
 * 语法：ary.splice(x,y)
 * 1. 删除一项或多项
 * 2. 第一个索引(包含该索引)，第二个删除的个数
 * 3. 返回删除后的数组项组成的新数组
 * 4. 改变
 */
