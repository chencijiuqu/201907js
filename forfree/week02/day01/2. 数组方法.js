// 数组：对象数据类型的；是工作中最常见的一种数据类型。后台在和前端进行数据交互时，经常以数组的数据格式返给前端

// 数组给我们提供了大量方法


/**
 * 1. 数组方法的作用
 * 2. 参数
 * 3. 方法的返回值
 * 4. 原有的数组是否发生变化
 * */ 
var ary = [1,3,5,7,9,2,4,6,8,0];
console.log(ary.pop());


/**1. pop() 是个函数
 * 语法：ary.pop()
 * 1. 删除数组的最后一项
 * 2. 无参数
 * 3. 被删除的那一项
 * 4. 发生变化
 */
var ary1 = [1,3,5,7,9,2,4,6,8,0];
ary1.pop();


/**2. push()
 * 语法：ary.push(100,{})
 * 1. 向数组末端增加一项或多项
 * 2. 要增加的数组项(一项或多项)
 * 3. 返回新数组的长度(length)
 * 4. 改变
 */
var ary2 = [1,3,5,7,9,2,4,6,8,0];
ary2.push(2);
ary2.push(4,6)


/**3. shift
 * 语法：ary.shift()
 * 1. 向数组开头删除一项
 * 2. 无参数
 * 3. 返回被删除的那一项
 * 4. 改变
 */
var ary3 = [1,3,5,7,9,2,4,6,8,0];
ary3.shift();


/**4. unshift
 * 语法：ary.unshift({},function () {})
 * 1. 向数组开头增加一项或多项
 * 2. 要增加的数组项(一项或多项)
 * 3. 返回新数组的长度(length)
 * 4. 改变
 */
var ary4 = [1,3,5,7,9,2,4,6,8,0];
ary4.unshift(0);
ary4.unshift([2,4,6,8,20],{name:"张三"})


/**5. slice
 * 语法：ary.slice(m,n)：从 m 开始截取到 n ，但是不包含 n
 * 语法：ary.slice(m); 从索引 m 开始 复制到最后一项
 * 语法：ary.slice(): 复制这个数组但空间地址相等
 * 语法：ary.slice(1,-1) - > (开始索引,数组.length + 负数); 在里面包含负数，就会用该length 负数 ？？如果负数大于length呢 
 * 语法：ary.slice(m,n); 如果 m 比 n 大，返回值就是空数组
 * 语法：ary.slice(m,n,x)
 * 1. 截取(复制)
 * 2. 开始索引，和结尾索引(不包含该索引)
 * 3. 返回截取到的新数组
 * 4. 不改变
 */
var ary5 = [12,3,4,6,3,7,9,10]; // length:8

ary5.slice(-7,-10); // 8-7 -> 1 8-10 -> -2
// [] 

ary5.slice(-7,-1); // 8-7 -> 1 8-1 -> 7(不包含7)
(6) [3, 4, 6, 3, 7, 9] 

ary5.slice(-10,-1) // 8-10 -> -2 8-1 -> 7
(7) [12, 3, 4, 6, 3, 7, 9]

ary5.slice(-7,-5) // 8-7 -> 1 8-5 -> 3
(2) [3, 4]

/**6. splice
 * 语法：ary.splice(x,y,z);  从索引x开始删除y个，用z项替换
 * 语法： ary.splic(x,0,z); 从索引x开始删除0个，在索引x前面替换z项
 * 语法：ary.splice(x,y); 从索引x开始删除y个
 * 语法：ary.splice(x); 从索引x开始删除到数组末尾
 * 语法：ary.splice(-x); 从 数组.length + -x 开始删除到数组末尾
 * 语法：ary.splice(0); 从索引0删除的数组末尾 
 * 1. 删除一项或多项
 * 2. 第一个索引(包含该索引)，第二个删除的个数，第三个参数和后面的参数替换到被删除的数组
 * 3. 返回删除后的数组项组成的新数组
 * 4. 改变
 */
var ary6 = [0,1,2,3,4,5,6,7,8,9,];
ary6.splice(1,2,2,2,7); // [1,2,3] ary6 = [0,2,2,7,4,5,6,7,8,9];

/**7.sort
 * 语法：数组.sort() 只能正确排相同位数的数组，(只能正确排全是个位数或者全是两位数的)
 * 语法：数组.sort( a,b => return a - b) 从小到大排序 -> a 是后一项 b是前一项 如果负数位置相换，如果正数就不换
 * 语法：数组。sort( a,b => return b - a) 从大到小排序
 * 1. 排序
 * 2. callback(回调函数)
 * 3. 返回排好序的新数组
 * 4. 改变
 */
var ary7 = [0,3,5,6,3,2,7,5,3,9,22,42,56,24]
ary.sort(function (a,b) {
    return a - b;
    // 根据函数的返回值的正负判断是否进行位置交换
})

var ary7 = ["9","2","5","1","5","3","7","11","33","123","12","0",12,55,2]
ary7.sort((a,b) => {return a-b});
// (15) ["0", "1", "2", 2, "3", "5", "5", "7", "9", "11", "12", 12, "33", 55, "123"] -> 会转换成数字再比较

var ary7 = ["v","s","q","a","z","w","b","p","i","f"];
ary7.sort((a,b) => {return a - b})

/**8.reverse
 * 语法： ary.reverse() 将原数组颠倒 第一项变最后一项，
 * 1. 将原数组翻转
 * 2. 无参数
 * 3. 返回翻转后的新数组
 * 4. 改变
 */

/**9.indexOf
 * 1. 查找这项在数组中第一次出现的索引位置
 * 2. 要查找的索引的数组项
 * 3. 返回该项第一次出现的索引
 * 4. 不改变
 */
var ary = [12,3,456,6,12,3,6,12];
ary.indexOf(12,2); //  第二个参数是从第几个开始检测，如果该参数是负数就是这个数组的length + 这个负数
/**10.lastindexOf
 * 1. 查找该项在数组中最后一次出现的索引位置
 * 2. 参数是要查找索引的数组项
 * 3. 返回该项的最后一次出现的索引
 * 4. 不改变
 */

 // 如果校验的数组成员不存在，那么返回 -1

/**11.concat
 * 语法： 数组.concat([1,2,3]); // [...,1,2,3] 拼接数组
 * 语法： 数组.concat(1,2,3); // [...,1,2,3] 拼接数组
 * 语法：数组.concat(1); // [...,1] 拼接数组
 * 语法： 数组.concat(); // 复制一份原数组 跟原数组不相等
 * 1. 连接(拼接)数组
 * 2. 要拼接的数组项(一个或多个)或者数组
 * 3. 返回拼接后的新数组
 * 4. 不改变
 */

/**12. join
 * 语法：数组.join("x"); // "数组项x数组项x数组项"
 * 1. 将数组的每一项按照特定的字符转换成字符串
 * 2. 字符
 * 3. 返回连接在一起的字符串
 * 4. 不改变
 */

/**13.map
 * 语法：数组.map(function (数组每一项,数组成员索引,原数组) {数组成员有几项，回调函数执行几次})
 * 1. 可以映射成新数组;根据回调函数的返回值组成了新的数组。
 * 2. callback(回调函数)
 * 3. 映射后的新数组
 * 4. 不改变
 */
ary.map(function (item,index,all) {
    all[index] = item + 1;
    ary += item + 1;
})


/**14.forEach
 * 语法：数组.forEach(function (数组每一项，数组成员索引，原数组) {})
 * 1. 遍历这个数组
 * 2. callback(回调函数)
 * 3. 没有返回值，返回值是 undefined
 * 4. 不改变
 */
var ary = [1,213,324,45,23,21,21];

/**15 toString
 * 语法：数组.toString()
 * 1. 将数组转成字符串
 * 2. 没有参数
 * 3. 返回值转换后的字符串
 * 4. 不改变
 */
[].toString(); // ""
[ ].toString(); // ""
[1,2].toString(); // "1,2"




// 给数组末端增加项
// ary.push
// ary[length + 1]
// ary.splice(length,0,增加项)
// ary=ary.concat(x)

// 给数组末端删除项
// ary.pop
// ary.length--
// ary.splice(length - 1,1)
// 